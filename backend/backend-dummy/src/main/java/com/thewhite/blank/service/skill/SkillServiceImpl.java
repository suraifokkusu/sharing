package com.thewhite.blank.service.skill;

import com.google.common.collect.Lists;
import com.querydsl.core.types.Predicate;
import com.thewhite.blank.model.QSkill;
import com.thewhite.blank.model.Skill;
import com.thewhite.blank.repository.SkillRepository;
import com.thewhite.blank.service.skill.argument.CreateSkillArgument;
import com.thewhite.blank.service.skill.argument.SearchSkillArgument;
import com.thewhite.blank.service.skill.argument.UpdateSkillArgument;
import com.thewhite.blank.util.WhereClauseBuilder;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static org.springframework.transaction.annotation.Isolation.SERIALIZABLE;


/**
 * Generated by Thanos
 */
@Service
@RequiredArgsConstructor
public class SkillServiceImpl implements SkillService {

    private final SkillRepository repository;

    @Override
    @Transactional
    public Skill create(@NonNull CreateSkillArgument argument) {
        return repository.save(Skill.builder()
                                    .name(argument.getName())
                                    .build());
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<Skill> get(@NonNull UUID id) {
        return repository.findById(id);
    }

    @Override
    @Transactional(readOnly = true)
    public Skill getExisting(@NonNull UUID id) {
        return repository.findById(id)
                         .orElseThrow(() -> new RuntimeException("Skill.notFound"));
    }

    @Override
    @Transactional(readOnly = true)
    public List<Skill> list(@NonNull SearchSkillArgument argument, @NonNull Sort sort) {
        Predicate predicate = buildPredicate(argument);

        return Lists.newArrayList(
                repository.findAll(predicate, sort));
    }

    @Override
    @Transactional(readOnly = true)
    public Page<Skill> page(@NonNull SearchSkillArgument argument, @NonNull Pageable pageable) {
        Predicate predicate = buildPredicate(argument);

        return repository.findAll(predicate, pageable);
    }

    private Predicate buildPredicate(SearchSkillArgument argument) {
        QSkill qSkill = QSkill.skill;
        return WhereClauseBuilder.getNew()
                                 .optionalCollectionAnd(argument.getIds(), qSkill.id::in)
                                 .build();
    }

    @Override
    @Transactional
    public Skill update(@NonNull UUID id, @NonNull UpdateSkillArgument argument) {
        Skill entity = getExisting(id);

        entity.setName(argument.getName());

        return repository.save(entity);
    }

    @Override
    @Transactional(isolation = SERIALIZABLE)
    public void delete(@NonNull UUID id) {
        Skill entity = getExisting(id);

        repository.delete(entity);
    }
}