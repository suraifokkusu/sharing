package com.thewhite.blank.service.announcement;

import com.google.common.collect.Lists;
import com.querydsl.core.types.Predicate;
import com.thewhite.blank.model.Announcement;
import com.thewhite.blank.model.QAnnouncement;
import com.thewhite.blank.repository.AnnouncementRepository;
import com.thewhite.blank.service.announcement.argument.CreateAnnouncementArgument;
import com.thewhite.blank.service.announcement.argument.SearchAnnouncementArgument;
import com.thewhite.blank.service.announcement.argument.UpdateAnnouncementArgument;
import com.thewhite.blank.util.WhereClauseBuilder;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static com.thewhite.blank.model.AnnouncementStatus.HIDDEN;
import static org.springframework.transaction.annotation.Isolation.SERIALIZABLE;


/**
 * Generated by Thanos
 */
@Service
@RequiredArgsConstructor
public class AnnouncementServiceImpl implements AnnouncementService {

    private final AnnouncementRepository repository;

    @Override
    @Transactional
    public Announcement create(@NonNull CreateAnnouncementArgument argument) {
        return repository.save(Announcement.builder()
                                           .title(argument.getTitle())
                                           .imageId(argument.getImageId())
                                           .price(argument.getPrice())
                                           .description(argument.getDescription())
                                           .teacher(argument.getTeacher())
                                           .status(HIDDEN)
                                           .build());
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<Announcement> get(@NonNull UUID id) {
        return repository.findById(id);
    }

    @Override
    @Transactional(readOnly = true)
    public Announcement getExisting(@NonNull UUID id) {
        return repository.findById(id)
                         .orElseThrow(() -> new RuntimeException("Announcement.notFound"));
    }

    @Override
    @Transactional(readOnly = true)
    public List<Announcement> list(@NonNull SearchAnnouncementArgument argument, @NonNull Sort sort) {
        Predicate predicate = buildPredicate(argument);

        return Lists.newArrayList(
                repository.findAll(predicate, sort));
    }

    @Override
    @Transactional(readOnly = true)
    public Page<Announcement> page(@NonNull SearchAnnouncementArgument argument, @NonNull Pageable pageable) {
        Predicate predicate = buildPredicate(argument);

        return repository.findAll(predicate, pageable);
    }

    private Predicate buildPredicate(SearchAnnouncementArgument argument) {
    
        QAnnouncement qAnnouncement = QAnnouncement.announcement;
        return WhereClauseBuilder.getNew()
                                 .build();
    }

    @Override
    @Transactional
    public Announcement update(@NonNull UUID id, @NonNull UpdateAnnouncementArgument argument) {
        Announcement entity = getExisting(id);

        entity.setTitle(argument.getTitle());
        entity.setImageId(argument.getImageId());
        entity.setPrice(argument.getPrice());
        entity.setDescription(argument.getDescription());
        entity.setTeacher(argument.getTeacher());

        return repository.save(entity);
    }

    @Override
    @Transactional(isolation = SERIALIZABLE)
    public void delete(@NonNull UUID id) {
        Announcement entity = getExisting(id);

        repository.delete(entity);
    }
}