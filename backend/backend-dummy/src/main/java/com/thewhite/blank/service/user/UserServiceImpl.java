package com.thewhite.blank.service.user;

import com.google.common.collect.Lists;
import com.querydsl.core.types.Predicate;
import com.thewhite.blank.model.QUser;
import com.thewhite.blank.model.User;
import com.thewhite.blank.repository.UserRepository;
import com.thewhite.blank.service.user.argument.CreateUserArgument;
import com.thewhite.blank.service.user.argument.SearchUserArgument;
import com.thewhite.blank.service.user.argument.UpdateUserArgument;
import com.thewhite.blank.util.WhereClauseBuilder;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static org.springframework.transaction.annotation.Isolation.SERIALIZABLE;


/**
 * Generated by Thanos
 */
@Service
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {

    private final UserRepository repository;

    @Override
    @Transactional
    public User create(@NonNull CreateUserArgument argument) {
        return repository.save(User.builder()
                                   .nickname(argument.getNickname())
                                   .password(argument.getPassword())
                                   .displayName(argument.getDisplayName())
                                   .phone(argument.getPhone())
                                   .balanceOnWallet(argument.getBalanceOnWallet())
                                   .avatarId(argument.getAvatarId())
                                   .description(argument.getDescription())
                                   .learn(argument.getLearn())
                                   .teach(argument.getTeach())
                                   .build());
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<User> get(@NonNull UUID id) {
        return repository.findById(id);
    }

    @Override
    @Transactional(readOnly = true)
    public User getExisting(@NonNull UUID id) {
        return repository.findById(id)
                         .orElseThrow(() -> new RuntimeException("User.notFound"));
    }

    @Override
    @Transactional(readOnly = true)
    public List<User> list(@NonNull SearchUserArgument argument, @NonNull Sort sort) {
        Predicate predicate = buildPredicate(argument);

        return Lists.newArrayList(
                repository.findAll(predicate, sort));
    }

    @Override
    @Transactional(readOnly = true)
    public Page<User> page(@NonNull SearchUserArgument argument, @NonNull Pageable pageable) {
        Predicate predicate = buildPredicate(argument);

        return repository.findAll(predicate, pageable);
    }

    private Predicate buildPredicate(SearchUserArgument argument) {
    
        QUser qUser = QUser.user;
        return WhereClauseBuilder.getNew()
                                 .build();
    }

    @Override
    @Transactional
    public User update(@NonNull UUID id, @NonNull UpdateUserArgument argument) {
        User entity = getExisting(id);

        entity.setNickname(argument.getNickname());
        entity.setPassword(argument.getPassword());
        entity.setDisplayName(argument.getDisplayName());
        entity.setPhone(argument.getPhone());
        entity.setBalanceOnWallet(argument.getBalanceOnWallet());
        entity.setAvatarId(argument.getAvatarId());
        entity.setDescription(argument.getDescription());
        entity.setLearn(argument.getLearn());
        entity.setTeach(argument.getTeach());

        return repository.save(entity);
    }

    @Override
    @Transactional(isolation = SERIALIZABLE)
    public void delete(@NonNull UUID id) {
        User entity = getExisting(id);

        repository.delete(entity);
    }
}