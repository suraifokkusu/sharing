package com.thewhite.blank.api.announcement;

import com.thewhite.blank.action.announcement.create.CreateAnnouncementAction;
import com.thewhite.blank.action.announcement.update.UpdateAnnouncementAction;
import com.thewhite.blank.action.announcement.update.UpdateAnnouncementActionArgument;
import com.thewhite.blank.api.CollectionDto;
import com.thewhite.blank.api.announcement.dto.*;
import com.thewhite.blank.api.announcement.mapper.AnnouncementMapper;
import com.thewhite.blank.model.Announcement;
import com.thewhite.blank.service.announcement.AnnouncementService;
import com.thewhite.blank.service.announcement.argument.SearchAnnouncementArgument;
import com.thewhite.blank.util.MapperUtils;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.UUID;

import static org.springframework.http.HttpStatus.CREATED;


/**
 * Generated by Thanos
 */
@RestController
@RequestMapping("announcement")
@RequiredArgsConstructor
public class AnnouncementController {

    private final CreateAnnouncementAction createAnnouncementAction;
    private final UpdateAnnouncementAction updateAnnouncementAction;
    private final AnnouncementService service;
    private final AnnouncementMapper mapper;

    @PostMapping("create")
    @ResponseStatus(CREATED)
    public AnnouncementDto create(@RequestBody @Valid CreateAnnouncementDto dto) {
        return MapperUtils.getMapper(mapper::toDto)
                          .compose(createAnnouncementAction::execute)
                          .compose(mapper::toCreateActionArgument)
                          .apply(dto);
    }

    @GetMapping("{id}")
    public AnnouncementDto get(@PathVariable UUID id) {
        return MapperUtils.getMapper(mapper::toDto)
                          .compose(service::getExisting)
                          .apply(id);
    }

    @GetMapping("list")
    public List<AnnouncementListDto> list(SearchAnnouncementDto dto, Sort sort) {
        SearchAnnouncementArgument argument = mapper.toSearchArgument(dto);

        List<Announcement> list = service.list(argument, sort);

        return MapperUtils.mapList(mapper::toListDto, list);
    }

    @GetMapping("page")
    public CollectionDto<AnnouncementListDto> page(SearchAnnouncementDto dto, Pageable pageable) {
        SearchAnnouncementArgument argument = mapper.toSearchArgument(dto);

        Page<Announcement> page = service.page(argument, pageable);

        return MapperUtils.mapPage(mapper::toListDto, page);
    }

    @PostMapping("{id}/update")
    public AnnouncementDto update(@PathVariable UUID id, @RequestBody @Valid UpdateAnnouncementDto dto) {
        UpdateAnnouncementActionArgument argument = mapper.toUpdateActionArgument(id, dto);

        Announcement entity = updateAnnouncementAction.execute(argument);

        return mapper.toDto(entity);
    }

    @PostMapping("{id}/delete")
    public void delete(@PathVariable UUID id) {
        service.delete(id);
    }
}