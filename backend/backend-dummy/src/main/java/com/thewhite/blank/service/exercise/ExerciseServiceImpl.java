package com.thewhite.blank.service.exercise;

import com.google.common.collect.Lists;
import com.querydsl.core.types.Predicate;
import com.thewhite.blank.model.Exercise;
import com.thewhite.blank.model.QExercise;
import com.thewhite.blank.repository.ExerciseRepository;
import com.thewhite.blank.service.exercise.argument.CreateExerciseArgument;
import com.thewhite.blank.service.exercise.argument.SearchExerciseArgument;
import com.thewhite.blank.service.exercise.argument.UpdateExerciseArgument;
import com.thewhite.blank.util.WhereClauseBuilder;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static com.thewhite.blank.model.ExerciseStatus.REQUEST;
import static org.springframework.transaction.annotation.Isolation.SERIALIZABLE;


/**
 * Generated by Thanos
 */
@Service
@RequiredArgsConstructor
public class ExerciseServiceImpl implements ExerciseService {

    private final ExerciseRepository repository;

    @Override
    @Transactional
    public Exercise create(@NonNull CreateExerciseArgument argument) {
        return repository.save(Exercise.builder()
                                       .title(argument.getTitle())
                                       .description(argument.getDescription())
                                       .announcement(argument.getAnnouncement())
                                       .teacher(argument.getTeacher())
                                       .student(argument.getStudent())
                                       .date(argument.getDate())
                                       .status(REQUEST)
                                       .build());
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<Exercise> get(@NonNull UUID id) {
        return repository.findById(id);
    }

    @Override
    @Transactional(readOnly = true)
    public Exercise getExisting(@NonNull UUID id) {
        return repository.findById(id)
                         .orElseThrow(() -> new RuntimeException("Exercise.notFound"));
    }

    @Override
    @Transactional(readOnly = true)
    public List<Exercise> list(@NonNull SearchExerciseArgument argument, @NonNull Sort sort) {
        Predicate predicate = buildPredicate(argument);

        return Lists.newArrayList(
                repository.findAll(predicate, sort));
    }

    @Override
    @Transactional(readOnly = true)
    public Page<Exercise> page(@NonNull SearchExerciseArgument argument, @NonNull Pageable pageable) {
        Predicate predicate = buildPredicate(argument);

        return repository.findAll(predicate, pageable);
    }

    private Predicate buildPredicate(SearchExerciseArgument argument) {
    
        QExercise qExercise = QExercise.exercise;
        return WhereClauseBuilder.getNew()
                                 .build();
    }

    @Override
    @Transactional
    public Exercise update(@NonNull UUID id, @NonNull UpdateExerciseArgument argument) {
        Exercise entity = getExisting(id);

        entity.setTitle(argument.getTitle());
        entity.setDescription(argument.getDescription());
        entity.setAnnouncement(argument.getAnnouncement());
        entity.setTeacher(argument.getTeacher());
        entity.setStudent(argument.getStudent());
        entity.setDate(argument.getDate());

        return repository.save(entity);
    }

    @Override
    @Transactional(isolation = SERIALIZABLE)
    public void delete(@NonNull UUID id) {
        Exercise entity = getExisting(id);

        repository.delete(entity);
    }
}