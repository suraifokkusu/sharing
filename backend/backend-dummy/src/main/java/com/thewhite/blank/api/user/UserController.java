package com.thewhite.blank.api.user;

import com.thewhite.blank.api.CollectionDto;
import com.thewhite.blank.api.user.dto.*;
import com.thewhite.blank.api.user.mapper.UserMapper;
import com.thewhite.blank.model.Skill;
import com.thewhite.blank.model.User;
import com.thewhite.blank.service.skill.SkillService;
import com.thewhite.blank.service.skill.argument.SearchSkillArgument;
import com.thewhite.blank.service.user.UserService;
import com.thewhite.blank.service.user.argument.CreateUserArgument;
import com.thewhite.blank.service.user.argument.SearchUserArgument;
import com.thewhite.blank.service.user.argument.UpdateUserArgument;
import com.thewhite.blank.util.MapperUtils;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.springframework.http.HttpStatus.CREATED;


/**
 * Generated by Thanos
 */
@RestController
@RequestMapping("user")
@RequiredArgsConstructor
public class UserController {

    private final UserService userService;
    private final SkillService skillService;
    private final UserMapper mapper;

    @PostMapping("create")
    @ResponseStatus(CREATED)
    public UserDto create(@RequestBody @Valid CreateUserDto dto) {
        List<Skill> learnSkills = skillService.list(SearchSkillArgument.builder().ids(dto.getLearnIds()).build(), Sort.unsorted());
        List<Skill> teachSkills = skillService.list(SearchSkillArgument.builder().ids(dto.getTeachIds()).build(), Sort.unsorted());
        CreateUserArgument createArgument = mapper.toCreateArgument(dto, learnSkills, teachSkills);

        return MapperUtils.getMapper(mapper::toDto)
                          .compose(userService::create)
                          .apply(createArgument);
    }

    @GetMapping("{id}")
    public UserDto get(@PathVariable UUID id) {
        return MapperUtils.getMapper(mapper::toDto)
                          .compose(userService::getExisting)
                          .apply(id);
    }

    @GetMapping("list")
    public List<UserListDto> list(SearchUserDto dto, Sort sort) {
        SearchUserArgument argument = mapper.toSearchArgument(dto);

        List<User> list = userService.list(argument, sort);

        return MapperUtils.mapList(mapper::toListDto, list);
    }

    @GetMapping("page")
    public CollectionDto<UserListDto> page(SearchUserDto dto, Pageable pageable) {
        SearchUserArgument argument = mapper.toSearchArgument(dto);

        Page<User> page = userService.page(argument, pageable);

        return MapperUtils.mapPage(mapper::toListDto, page);
    }

    @PostMapping("{id}/update")
    public UserDto update(@PathVariable UUID id, @RequestBody @Valid UpdateUserDto dto) {
        List<Skill> learnSkills = skillService.list(SearchSkillArgument.builder().ids(dto.getLearnIds()).build(), Sort.unsorted());
        List<Skill> teachSkills = skillService.list(SearchSkillArgument.builder().ids(dto.getTeachIds()).build(), Sort.unsorted());
        UpdateUserArgument argument = mapper.toUpdateArgument(dto, learnSkills, teachSkills);

        User entity = userService.update(id, argument);

        return mapper.toDto(entity);
    }

    @PostMapping("{id}/delete")
    public void delete(@PathVariable UUID id) {
        userService.delete(id);
    }
}